<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Activity Tracker</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto:wght@300&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(to bottom right, #f4f4f4, #e0f7fa);
      color: #333;
      min-height: 100vh;
      overflow-x: hidden;
    }

    .hero-section {
      height: 100vh;
      background-image: linear-gradient(
            rgba(255, 255, 255, 0.7),  
            rgba(255, 255, 255, 0.372), 
            rgba(255, 255, 255, 0.187)
            ),
            url('staffDash.jpeg');
      background-size: cover;
      background-position: center;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      color: #fff;
      position: relative;
    }

    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
    }

    .hero-text {
      position: relative;
      z-index: 1;
    }

    h1.hero-title {
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 64px;
      letter-spacing: 3px;
      text-transform: uppercase;
      margin-bottom: 20px;
      animation: slideInDown 1.5s ease;
    }

    .hero-subtitle {
      font-family: 'Poppins', sans-serif;
      font-weight: 300;
      font-size: 24px;
      margin-bottom: 40px;
      animation: fadeInUp 2s ease;
    }

    button.hero-btn {
      padding: 15px 40px;
      background-color: #ff5722;
      color: #fff;
      border: none;
      border-radius: 50px;
      font-size: 18px;
      cursor: pointer;
      transition: all 0.3s ease;
      animation: fadeInUp 2.5s ease;
    }

    button.hero-btn:hover {
      background-color: #e64a19;
      transform: translateY(-3px);
    }

    /* Form and Task Section */
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      padding-top: 50px;
    }

    h2.section-title {
      font-family: 'Poppins', sans-serif;
      text-align: center;
      font-size: 36px;
      color: #333;
      margin-bottom: 20px;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .form-container {
      display: flex;
      justify-content: space-between;
      margin-bottom: 30px;
      animation: fadeInUp 1.5s ease;
    }

    .form-group {
      flex: 1;
      margin-right: 20px;
    }

    .form-group input {
      width: 100%;
      padding: 15px;
      font-size: 16px;
      border-radius: 10px;
      border: 2px solid #ddd;
      transition: all 0.3s ease;
    }

    .form-group input:focus {
      border-color: #ff5722;
      outline: none;
      box-shadow: 0 0 8px rgba(255, 87, 34, 0.2);
    }

    button {
      padding: 15px 40px;
      font-family: 'Poppins', sans-serif;
      background-color: #ff5722;
      font-size: 16px;
      color: white;
      border: none;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    button:hover {
      transform: translateY(-3px);
    }

    /* Task List and Cards */
    .task-list {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    .task-card {
      width: 30%;
      background-color: #fff;
      border-radius: 15px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin-bottom: 20px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      animation: fadeInUp 1.8s ease;
      position: relative; /* Added for menu positioning */
    }

    .task-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
    }

    .task-title {
      font-family: 'Poppins', sans-serif;
      font-size: 20px;
      color: #333;
      margin-bottom: 10px;
    }

    .menu-container {
      position: absolute;
      top: 10px;
      right: 10px;
    }

    .menu-btn {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: black;
      padding: 5px;
    }

    .menu-dropdown {
      display: none;
      position: absolute;
      right: 0;
      background-color: white;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      z-index: 1;
      border-radius: 5px;
      padding: 10px 0;
      width: 150px;
    }

    .menu-dropdown button {
      display: block;
      padding: 10px 20px;
      width: 100%;
      text-align: left;
      border: none;
      background: none;
      cursor: pointer;
      font-size: 14px;
      color: #333;
    }

    .menu-dropdown button:hover {
      background-color: #f4f4f4;
    }

    /* Modal Styles */
    .modal {
      display: none; 
      position: fixed;
      z-index: 999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 400px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      animation: fadeInUp 0.3s ease;
    }

    .modal-content input {
      width: 80%;
      padding: 10px;
      margin: 10px 0;
      border: 2px solid #ddd;
      border-radius: 5px;
    }

    .modal-actions {
      display: flex;
      justify-content: space-between;
      margin-top: 15px;
    }

    .modal-actions button {
      width: 45%;
      padding: 10px;
      border: none;
      cursor: pointer;
      background-color: #ff5722;
      color: white;
      border-radius: 5px;
    }

    .modal-actions button:hover {
      background-color: #e64a19;
    }

    .modal-close {
      background-color: #aaa;
    }

    .modal-close:hover {
      background-color: #888;
    }

  </style>
</head>

<body>
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-text">
      <h1 class="hero-title">Activity Tracker</h1>
      <p class="hero-subtitle">Track Your Progress</p>
      <button class="hero-btn">Back</button>
    </div>
  </div>

  <!-- Form Section -->
  <div class="container">
    <h2 class="section-title">Add New Activity</h2>
    <form id="activityForm" enctype="multipart/form-data">
      <div class="form-container">
        <div class="form-group">
          <input type="text" name="description" id="task" placeholder="Activity Description" required>
        </div>
        <div class="form-group">
          <input type="number" name="hours" id="hours" placeholder="Hours Spent" required>
        </div>
        <div class="form-group">
          <input type="file" name="media" id="media" accept="image/*, video/*">
        </div>
        <button type="submit" id="addTaskBtn">Add Task</button>
      </div>
    </form>

    <!-- Task List Section -->
    <div class="task-list" id="taskList"></div>
  </div>

  <script>
    const taskList = document.getElementById('taskList');
    const tasks = [];

    // Form submission to add a new task
    document.getElementById('activityForm').addEventListener('submit', async function (event) {
        event.preventDefault();  // Prevent page reload on form submission

        const taskInput = document.getElementById('task');
        const hoursInput = document.getElementById('hours');
        const mediaInput = document.getElementById('media');

        const formData = new FormData();
        formData.append('description', taskInput.value);
        formData.append('hours', hoursInput.value);
        if (mediaInput.files.length > 0) {
            formData.append('media', mediaInput.files[0]);
        }

        try {
            const response = await fetch('/add-activity', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (response.ok) {
                addTaskToUI(result);  // Add task to UI
                clearForm();          // Clear the form after successful submission
            } else {
                alert('Error adding task: ' + result.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    // Function to add a task to the UI
    function addTaskToUI(task) {
        const taskCard = document.createElement('div');
        taskCard.classList.add('task-card');

        let mediaElement = '';
        if (task.media && task.media.startsWith('uploads/')) {
            const fileExtension = task.media.split('.').pop().toLowerCase();
            if (['jpg', 'jpeg', 'png'].includes(fileExtension)) {
                mediaElement = `<img src="/${task.media}" alt="Activity Media" style="width: 100%; height: 150px; object-fit: cover;" />`;
            } else if (['mp4', 'mov'].includes(fileExtension)) {
                mediaElement = `<video width="100%" height="150" controls>
                                  <source src="/${task.media}" type="video/${fileExtension}">
                                  Your browser does not support the video tag.
                                </video>`;
            }
        }

        const taskIndex = tasks.length; // Index of task
        taskCard.innerHTML = `
            <h3 class="task-title">${task.description}</h3>
            <p>${task.hours} hours spent</p>
            <p>Added on: ${task.date}</p>   
            ${mediaElement}
            <div class="menu-container">
                <button class="menu-btn" onclick="toggleMenu(${taskIndex})">â‹®</button>
                <div class="menu-dropdown" id="menu-${taskIndex}">
                    <button onclick="deleteTask(${taskIndex})">Delete</button>
                </div>
            </div>
        `;

        taskList.appendChild(taskCard);
        tasks.push(task);

        // Scroll to the newly added task
        taskCard.scrollIntoView({ behavior: "smooth" });
    }

    // Function to clear the form after submission
    function clearForm() {
        document.getElementById('task').value = '';
        document.getElementById('hours').value = '';
        document.getElementById('media').value = '';
    }

    // Function to toggle the dropdown menu
    function toggleMenu(index) {
        const menu = document.getElementById(`menu-${index}`);
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    }

    // Function to delete a task
    function deleteTask(index) {
        if (confirm('Are you sure you want to delete this task?')) {
            tasks.splice(index, 1); // Remove task from array
            renderTasks();
        }
    }

    // Function to re-render the task list after deleting a task
    function renderTasks() {
        taskList.innerHTML = '';
        tasks.forEach((task, index) => {
            addTaskToUI(task);
        });
    }
  </script>
</body>

</html>
